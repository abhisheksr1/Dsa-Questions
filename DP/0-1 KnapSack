class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSackRec(int w, int wt[], int val[], int n, int **t) 
    { 
        
       if(n==0 || w==0){
           return 0;
       }
       
       if(t[n][w]!=-1){
           return t[n][w];
       }
       
       if(wt[n-1]<=w){
           return t[n][w] = max(val[n-1] + knapSackRec(w-wt[n-1], wt, val, n-1,t), knapSackRec(w,wt,val,n-1,t));
       }
       else{
           return t[n][w] = knapSackRec(w,wt,val,n-1,t);
       }
       
    }
    
    int knapSack(int w, int wt[], int val[], int n) 
    { 
        
       int **t = new int*[n+1];
       for(int i=0;i<n+1;i++){
           t[i] = new int[w+1];
       }
       
      for(int i=0;i<n+1;i++){
          for(int j=0;j<w+1;j++){
              t[i][j] = -1;
          }
      }
       
       return knapSackRec(w, wt, val, n, t);
       
    }
};
