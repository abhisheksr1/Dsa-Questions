class Node{
	public:
	Node* child[26];
	bool flag = false;
	
	bool containsKey(char ch){
		return child[ch - 'a']!=NULL;
	}
	
	void put(char ch, Node* node){
		child[ch - 'a'] = node;
	}
	
	Node* get(char ch){
		return child[ch - 'a'];
	}
	
	void setEnd(){
		flag = true;
	}
	
	bool getFlag(){
		return flag;
	}
};

class Trie{
	public:
	Node* root;
	
	Trie(){
		root = new Node();
	}
	
	void insert(string word){
		Node* node = root;
		for(int i=0; i<word.length(); i++){
			if(!node->containsKey(word[i])){
				node->put(word[i], new Node());
			}
			
			node = node->get(word[i]);
		}
		
		node->setEnd();
	}
	
	bool check(string word){
		Node* node = root;
		for(int i=0;i<word.length();i++){
			node = node->get(word[i]);
			if(!node->getFlag()){
				return false;
			}
		}
		
		return true;
	}
};

string completeString(int n, vector<string> &a){
	Trie dictionary;
	for(int i=0;i<a.size();i++){
		dictionary.insert(a[i]);
	}
	
 	string ans ="";
	for(int i=0;i<a.size();i++){
		if(dictionary.check(a[i])){
			if(ans.size()<a[i].size()){
				ans = a[i];
			}
			else if(ans.size()==a[i].size() && a[i]<ans){
					ans = a[i];
			}
		}
	}
	if(ans==""){
		return "None";
	}
	return ans;
}
