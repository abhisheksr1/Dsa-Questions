class Node{
	public:
	Node* child[26];
	int ew;
	int cp;
	
	Node(){
		for(int i=0;i<26;i++)
			child[i]=NULL;
		ew=0;
		cp=0;
	}
	
	bool containsKey(char ch){
		return child[ch - 'a']!=NULL;
	}
	
	void put(char ch, Node* node){
		child[ch - 'a'] = node;
	}
	
	Node* get(char ch){
		return child[ch - 'a'];
	}
};

class Trie{

    public:
	
	Node* root;
	
    Trie(){
        root = new Node();
    }

    void insert(string &word){
        Node* node = root;
		for(int i=0;i<word.length();i++){
			if(!node->containsKey(word[i])){
				node->put(word[i], new Node());
			}
			
			node = node->get(word[i]);
			node->cp++;
		}
		node->ew++;
    }

    int countWordsEqualTo(string &word){
        Node* node = root;
		for(int i=0;i<word.length();i++){
			if(!node->containsKey(word[i])){
				return 0;
			}
			
			node = node->get(word[i]);
		}
		
		return node->ew;
    }

    int countWordsStartingWith(string &word){
        Node* node = root;
		for(int i=0;i<word.length();i++){
			if(!node->containsKey(word[i])){
				return 0;
			}
			
			node = node->get(word[i]);
		}
		
		return node->cp;
    }

    void erase(string &word){
        Node* node = root;
		for(int i=0;i<word.length();i++){
			node = node->get(word[i]);
			
			node->cp--;
		}
		node->ew--;
    }
};
