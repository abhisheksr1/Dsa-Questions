class Node{
	public:
	Node* child[26];
	
	bool containsKey(char ch){
		return child[ch - 'a']!=NULL;
	}
	
	void put(char ch, Node* node){
		child[ch - 'a'] = node;
	}
	
	Node* get(char ch){
		return child[ch - 'a'];
	}
};

class Trie{
	private:
	Node* root;
	
	public:
	Trie(){
		root = new Node();
	}
	
	int countSub(string &word){
		int count = 0;
		for(int i=0;i<word.length();i++){
			Node* node = root;
			for(int j=i;j<word.length();j++){
				if(!node->containsKey(word[j])){
					node->put(word[j],new Node());
					count++;
				}
				node = node->get(word[j]);
			}
		}
		
		return ++count;
	}
};

int countDistinctSubstrings(string &s)
{
    Trie trie;
	int ans = trie.countSub(s);
	return ans;
}
